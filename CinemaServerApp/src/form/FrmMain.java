package form;

import form.settings.FrmServerConfig;
import java.awt.Color;
import javax.swing.JOptionPane;
import thread.ServerThread;
import util.SettingsLoader;

public class FrmMain extends javax.swing.JFrame {

    private ServerThread serverThread;

    /**
     * Creates new form FrmMain
     */
    public FrmMain() {
        initComponents();
        setLocation();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnStart = new javax.swing.JButton();
        btnStop = new javax.swing.JButton();
        pnlServer = new javax.swing.JPanel();
        lblServerStatus = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        txtPort = new javax.swing.JTextField();
        btnGetDefaultPort = new javax.swing.JButton();
        jmb = new javax.swing.JMenuBar();
        jmSettings = new javax.swing.JMenu();
        jmiConfig = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Server");

        btnStart.setText("Start server");
        btnStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartActionPerformed(evt);
            }
        });

        btnStop.setText("Stop server");
        btnStop.setEnabled(false);
        btnStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStopActionPerformed(evt);
            }
        });

        pnlServer.setBorder(javax.swing.BorderFactory.createTitledBorder("Server"));

        lblServerStatus.setForeground(new java.awt.Color(255, 51, 51));
        lblServerStatus.setText("Server is off.");

        jLabel1.setText("Port:");

        btnGetDefaultPort.setText("Get default port");
        btnGetDefaultPort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGetDefaultPortActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlServerLayout = new javax.swing.GroupLayout(pnlServer);
        pnlServer.setLayout(pnlServerLayout);
        pnlServerLayout.setHorizontalGroup(
            pnlServerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlServerLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlServerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlServerLayout.createSequentialGroup()
                        .addComponent(lblServerStatus)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(pnlServerLayout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtPort))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlServerLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnGetDefaultPort)))
                .addContainerGap())
        );
        pnlServerLayout.setVerticalGroup(
            pnlServerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlServerLayout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(pnlServerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnGetDefaultPort)
                .addGap(18, 18, 18)
                .addComponent(lblServerStatus)
                .addContainerGap(21, Short.MAX_VALUE))
        );

        jmSettings.setText("Settings");

        jmiConfig.setText("Server configuration...");
        jmiConfig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiConfigActionPerformed(evt);
            }
        });
        jmSettings.add(jmiConfig);

        jmb.add(jmSettings);

        setJMenuBar(jmb);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlServer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnStart, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 233, Short.MAX_VALUE)
                        .addComponent(btnStop, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlServer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnStop)
                    .addComponent(btnStart))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartActionPerformed
        int port;
        try {
            port = Integer.parseInt(txtPort.getText().trim());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Port must be an integer!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        serverThread = new ServerThread(this, port);
        serverThread.start();
        lblServerStatus.setText("Server is up.");
        lblServerStatus.setForeground(Color.green);
        btnStart.setEnabled(false);
        btnStop.setEnabled(true);
    }//GEN-LAST:event_btnStartActionPerformed

    private void btnStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStopActionPerformed
        serverThread.stopServer();
        btnStart.setEnabled(true);
        btnStop.setEnabled(false);
        if (serverThread != null) {
            serverThread.sendShutDownMessage();
        }
    }//GEN-LAST:event_btnStopActionPerformed

    private void btnGetDefaultPortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGetDefaultPortActionPerformed
        int port;
        try {
            port = Integer.parseInt(SettingsLoader.getInstance().getProperty("port"));
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Error occurred while loading default configuraion!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        txtPort.setText(String.valueOf(port));
    }//GEN-LAST:event_btnGetDefaultPortActionPerformed

    private void jmiConfigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiConfigActionPerformed
        FrmServerConfig frmServerConfig = new FrmServerConfig(this, true);
        frmServerConfig.setVisible(true);
        frmServerConfig.setTitle("Server configuration");
    }//GEN-LAST:event_jmiConfigActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnGetDefaultPort;
    private javax.swing.JButton btnStart;
    private javax.swing.JButton btnStop;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jmSettings;
    private javax.swing.JMenuBar jmb;
    private javax.swing.JMenuItem jmiConfig;
    private javax.swing.JLabel lblServerStatus;
    private javax.swing.JPanel pnlServer;
    private javax.swing.JTextField txtPort;
    // End of variables declaration//GEN-END:variables

    private void setLocation() {
        setLocationRelativeTo(null);
    }

    public void showShutDownMessage() {
        System.out.println("Server is shutting down...");
        lblServerStatus.setText("Server is off.");
        lblServerStatus.setForeground(Color.red);
    }

    public void showStartupMessage() {
        System.out.println("Starting server...\n");
        System.out.println("Server is up and running!\n");
        System.out.println("==========================================================\n\n");
        lblServerStatus.setText("Server is running.");
        lblServerStatus.setForeground(Color.green);
    }

}
