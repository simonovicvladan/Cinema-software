/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package form.projection;

import controller.Controller;
import domain.CinemaHall;
import domain.Movie;
import domain.Projection;
import form.projection.model.TableModelProjection;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultCellEditor;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.table.TableColumn;
import session.Session;

/**
 *
 * @author Vladan Simonovic
 */
public class FrmNewProjectionList extends javax.swing.JDialog {

    /**
     * Creates new form FrmNewProjectionList
     */
    public FrmNewProjectionList(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setCentered();
        setCurrentUser();
        prepareTableProjection();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlCurrentUser = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        lblCurrentUser = new javax.swing.JLabel();
        pnlProjectionList = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblProjection = new javax.swing.JTable();
        btnAdd = new javax.swing.JButton();
        btnRemove = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        pnlCurrentUser.setBorder(javax.swing.BorderFactory.createTitledBorder("User:"));

        jLabel1.setText("Current user:");

        lblCurrentUser.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblCurrentUser.setForeground(new java.awt.Color(0, 0, 204));

        javax.swing.GroupLayout pnlCurrentUserLayout = new javax.swing.GroupLayout(pnlCurrentUser);
        pnlCurrentUser.setLayout(pnlCurrentUserLayout);
        pnlCurrentUserLayout.setHorizontalGroup(
            pnlCurrentUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCurrentUserLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(lblCurrentUser, javax.swing.GroupLayout.DEFAULT_SIZE, 743, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnlCurrentUserLayout.setVerticalGroup(
            pnlCurrentUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCurrentUserLayout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(pnlCurrentUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(lblCurrentUser))
                .addContainerGap(48, Short.MAX_VALUE))
        );

        pnlProjectionList.setBorder(javax.swing.BorderFactory.createTitledBorder("Projection list"));

        tblProjection.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblProjection);

        btnAdd.setText("Add new projection");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnRemove.setText("Remove projection");
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        btnSave.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        btnSave.setForeground(new java.awt.Color(0, 153, 51));
        btnSave.setText("Save projection list");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlProjectionListLayout = new javax.swing.GroupLayout(pnlProjectionList);
        pnlProjectionList.setLayout(pnlProjectionListLayout);
        pnlProjectionListLayout.setHorizontalGroup(
            pnlProjectionListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlProjectionListLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addGap(18, 18, 18)
                .addGroup(pnlProjectionListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnRemove, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnAdd, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnSave, javax.swing.GroupLayout.DEFAULT_SIZE, 172, Short.MAX_VALUE))
                .addContainerGap())
        );
        pnlProjectionListLayout.setVerticalGroup(
            pnlProjectionListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlProjectionListLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlProjectionListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlProjectionListLayout.createSequentialGroup()
                        .addComponent(btnAdd)
                        .addGap(18, 18, 18)
                        .addComponent(btnRemove)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 110, Short.MAX_VALUE)
                        .addComponent(btnSave))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlCurrentUser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlProjectionList, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlCurrentUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(pnlProjectionList, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        TableModelProjection model = (TableModelProjection) tblProjection.getModel();
        model.add();
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        int selectedRow = tblProjection.getSelectedRow();
        if (selectedRow != -1) {
            TableModelProjection model = (TableModelProjection) tblProjection.getModel();
            model.remove(selectedRow);
        } else {
            JOptionPane.showMessageDialog(this, "Projection is not selected!", "Remove projection error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnRemoveActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        TableModelProjection model = (TableModelProjection) tblProjection.getModel();
        List<Projection> projections = model.getProjections();
        if (projections.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No projection to save!", "Save projection list error", JOptionPane.ERROR_MESSAGE);
        } else {
            try {
                checkProjections(projections);
                Controller.getInstance().saveProjections(projections);
                JOptionPane.showMessageDialog(this, "New projection list is saved!");
            } catch (Exception e) {
                System.out.println(e.getMessage());
                JOptionPane.showMessageDialog(this, "Projection list not saved!", "Save projection list error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnSaveActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnSave;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblCurrentUser;
    private javax.swing.JPanel pnlCurrentUser;
    private javax.swing.JPanel pnlProjectionList;
    private javax.swing.JTable tblProjection;
    // End of variables declaration//GEN-END:variables

    private void setCentered() {
        setLocationRelativeTo(null);
    }

    private void prepareTableProjection() {
        TableModelProjection model = new TableModelProjection(new ArrayList<>());
        tblProjection.setModel(model);
        model.setFrmNewProjectionList(this);

        // set table columns movie and cinema halls as cmbs
        try {
            List<Movie> movies = Controller.getInstance().getAllMovies();
            List<CinemaHall> halls = Controller.getInstance().getAllHalls();

            JComboBox cmbMovie = new JComboBox();
            JComboBox cmbHalls = new JComboBox();

            cmbMovie.removeAllItems();
            cmbHalls.removeAllItems();

            for (Movie movie : movies) {
                cmbMovie.addItem(movie);
            }
            for (CinemaHall hall : halls) {
                cmbHalls.addItem(hall);
            }

            TableColumn tcMovie = tblProjection.getColumnModel().getColumn(0);
            tcMovie.setCellEditor(new DefaultCellEditor(cmbMovie));

            TableColumn tcHall = tblProjection.getColumnModel().getColumn(1);
            tcHall.setCellEditor(new DefaultCellEditor(cmbHalls));
            System.out.println("Table is prepared.");

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Table preparation failed.", "Prepare table error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void setCurrentUser() {
        lblCurrentUser.setText(Session.getInstance().getCurrentUser().toString());
    }

    private void checkProjections(List<Projection> projections) throws Exception {
        for (Projection projection : projections) {
            for (Projection projection1 : projections) {
                if (!projection.getProjectionID().equals(projection1.getProjectionID())) {
                    if (projection.equals(projection1)) {
                        throw new Exception("There must not be two projections at same time in the same cinema hall.");
                    }
                }
            }
        }

    }
}
