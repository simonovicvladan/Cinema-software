/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package form.movie;

import controller.Controller;
import domain.Genre;
import domain.Movie;
import form.FrmMain;
import form.FrmMainLandscape;
import form.FrmMode;
import javax.swing.JOptionPane;
import session.Session;

/**
 *
 * @author Vladan Simonovic
 */
public class FrmMovie extends javax.swing.JDialog {


    /**
     * Creates new form FrmMovie
     *
     * @param parent
     */
    public FrmMovie(FrmMain aThis, boolean b, FrmMode frmMode) {
        super(aThis, b);
        initComponents();
        setCentered();
        adjustForm(frmMode);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlCurrentUser = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        lblCurrentUser = new javax.swing.JLabel();
        pnlMovie = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtReleasedYear = new javax.swing.JTextField();
        txtTitle = new javax.swing.JTextField();
        cmbGenre = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtDescription = new javax.swing.JTextArea();
        txtDirector = new javax.swing.JTextField();
        txtDuration = new javax.swing.JTextField();
        btnSaveNewMovie = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        lblMovieID = new javax.swing.JLabel();
        txtMovieID = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        pnlCurrentUser.setBorder(javax.swing.BorderFactory.createTitledBorder("User"));

        jLabel1.setText("Current user:");

        lblCurrentUser.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblCurrentUser.setForeground(new java.awt.Color(51, 0, 204));

        javax.swing.GroupLayout pnlCurrentUserLayout = new javax.swing.GroupLayout(pnlCurrentUser);
        pnlCurrentUser.setLayout(pnlCurrentUserLayout);
        pnlCurrentUserLayout.setHorizontalGroup(
            pnlCurrentUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCurrentUserLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(lblCurrentUser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnlCurrentUserLayout.setVerticalGroup(
            pnlCurrentUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCurrentUserLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlCurrentUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(lblCurrentUser))
                .addContainerGap(45, Short.MAX_VALUE))
        );

        pnlMovie.setBorder(javax.swing.BorderFactory.createTitledBorder("Movie"));

        jLabel2.setText("Title:");

        jLabel3.setText("Genre:");

        jLabel4.setText("Released year:");

        jLabel5.setText("Description:");

        jLabel6.setText("Director:");

        jLabel7.setText("Duration:");

        cmbGenre.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        txtDescription.setColumns(20);
        txtDescription.setRows(5);
        jScrollPane1.setViewportView(txtDescription);

        btnSaveNewMovie.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        btnSaveNewMovie.setForeground(new java.awt.Color(0, 153, 51));
        btnSaveNewMovie.setText("Save new movie");
        btnSaveNewMovie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveNewMovieActionPerformed(evt);
            }
        });

        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        lblMovieID.setText("Movie ID:");

        txtMovieID.setEditable(false);

        javax.swing.GroupLayout pnlMovieLayout = new javax.swing.GroupLayout(pnlMovie);
        pnlMovie.setLayout(pnlMovieLayout);
        pnlMovieLayout.setHorizontalGroup(
            pnlMovieLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMovieLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlMovieLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlMovieLayout.createSequentialGroup()
                        .addComponent(btnCancel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 550, Short.MAX_VALUE)
                        .addComponent(btnSaveNewMovie))
                    .addGroup(pnlMovieLayout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(36, 36, 36)
                        .addComponent(jScrollPane1))
                    .addGroup(pnlMovieLayout.createSequentialGroup()
                        .addGroup(pnlMovieLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7))
                        .addGap(51, 51, 51)
                        .addGroup(pnlMovieLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtDirector)
                            .addComponent(txtDuration)))
                    .addGroup(pnlMovieLayout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)
                        .addComponent(txtReleasedYear))
                    .addGroup(pnlMovieLayout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(65, 65, 65)
                        .addComponent(cmbGenre, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(pnlMovieLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(74, 74, 74)
                        .addComponent(txtTitle))
                    .addGroup(pnlMovieLayout.createSequentialGroup()
                        .addComponent(lblMovieID)
                        .addGap(50, 50, 50)
                        .addComponent(txtMovieID)))
                .addContainerGap())
        );
        pnlMovieLayout.setVerticalGroup(
            pnlMovieLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMovieLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlMovieLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblMovieID)
                    .addComponent(txtMovieID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlMovieLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlMovieLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(cmbGenre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlMovieLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtReleasedYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlMovieLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlMovieLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDirector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addGap(18, 18, 18)
                .addGroup(pnlMovieLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDuration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 92, Short.MAX_VALUE)
                .addGroup(pnlMovieLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSaveNewMovie)
                    .addComponent(btnCancel))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlCurrentUser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlMovie, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlCurrentUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(pnlMovie, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnSaveNewMovieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveNewMovieActionPerformed
        int releasedYear = -1;
        int duration = -1;
        String title = txtTitle.getText().trim();
        Genre genre = (Genre) cmbGenre.getSelectedItem();
        String strreleasedYear = txtReleasedYear.getText().trim();
        String description = txtDescription.getText().trim();
        String director = txtDirector.getText().trim();
        String strDuration = txtDuration.getText().trim();

        if (title.isEmpty() || strDuration.isEmpty() || description.isEmpty()
                || director.isEmpty() || strreleasedYear.isEmpty()) {
            JOptionPane.showMessageDialog(this, "All fields are required! Check input.", "Save error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        try {
            releasedYear = Integer.parseInt(strreleasedYear);
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Released year must be an integer!", "Save error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        try {
            duration = Integer.parseInt(strDuration);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Duration must be an integer!", "Save error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if (releasedYear <= 0 || duration <= 0) {
            JOptionPane.showMessageDialog(this, "Released year and duration must be positive!", "Save error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        try {
            Long createdMovieID = Controller.getInstance().saveMovie(new Movie(null, title, genre, releasedYear, description, director, duration));
            JOptionPane.showMessageDialog(this, "New movie is created! Movie ID: " + createdMovieID);

//            this.dispose();
//            FrmAddNewMovie frmAddNewMovie = new FrmAddNewMovie(frmMain, true);
//            frmAddNewMovie.setVisible(true);
            int result = JOptionPane.showConfirmDialog(this, "New movie?", "Question", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (result == JOptionPane.YES_OPTION) {
                viewMovie(new Movie());
            } else {
                dispose();
            }
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Movie not saved!", "Save error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnSaveNewMovieActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnSaveNewMovie;
    private javax.swing.JComboBox cmbGenre;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblCurrentUser;
    private javax.swing.JLabel lblMovieID;
    private javax.swing.JPanel pnlCurrentUser;
    private javax.swing.JPanel pnlMovie;
    private javax.swing.JTextArea txtDescription;
    private javax.swing.JTextField txtDirector;
    private javax.swing.JTextField txtDuration;
    private javax.swing.JTextField txtMovieID;
    private javax.swing.JTextField txtReleasedYear;
    private javax.swing.JTextField txtTitle;
    // End of variables declaration//GEN-END:variables

    private void setCentered() {
        setLocationRelativeTo(null);
    }

    private void setCurrentUser() {
        lblCurrentUser.setText(Session.getInstance().getCurrentUser().toString());
    }

    private void populateCmbGenre() {
        cmbGenre.removeAllItems();
        for (Genre genre : Genre.values()) {
            cmbGenre.addItem(genre);
        }
    }

    private void adjustForm(FrmMode frmMode) {
        setCurrentUser();
        populateCmbGenre();

        switch (frmMode) {
            case NEW:
                lblMovieID.setVisible(false);
                txtMovieID.setVisible(false);

                txtTitle.setEditable(true);
                txtDescription.setEditable(true);
                txtDirector.setEditable(true);
                txtReleasedYear.setEditable(true);
                txtDuration.setEditable(true);
                cmbGenre.setEditable(true);

                btnSaveNewMovie.setVisible(true);

                setTitle("New movie");
                break;

            case VIEW:
                lblMovieID.setVisible(true);
                txtMovieID.setVisible(true);

                txtTitle.setEditable(false);
                txtDescription.setEditable(false);
                txtDirector.setEditable(false);
                txtReleasedYear.setEditable(false);
                txtDuration.setEditable(false);
                cmbGenre.setEnabled(false);

                setTitle("Movie details");
                btnSaveNewMovie.setVisible(false);
                setMovie();
                break;
        }
    }

    private void setMovie() {
        // check if map contains movieID
        Movie movie = (Movie) Session.getInstance().getUseCaseParams().get("movieID");
        try {

            viewMovie(movie);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void viewMovie(Movie movie) {
        txtMovieID.setText(String.valueOf(movie.getMovieID()));
        txtTitle.setText(movie.getTitle());
        txtDescription.setText(movie.getDescription());
        txtDirector.setText(movie.getDirector());
        cmbGenre.setSelectedItem(movie.getGenre() == null ? null : movie.getGenre());
        txtDuration.setText(String.valueOf(movie.getDuration()));
        txtReleasedYear.setText(String.valueOf(movie.getReleaseYear()));
    }
}
