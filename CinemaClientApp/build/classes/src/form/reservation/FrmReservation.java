/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package form.reservation;

import communication.Communication;
import controller.Controller;
import domain.Member;
import domain.Projection;
import domain.Reservation;
import domain.User;
import form.member.model.TableModelMember;
import form.projection.model.TableModelProjection;
import form.reservation.model.TableModelReservation;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import session.Session;
import transfer.Request;
import transfer.Response;
import transfer.util.Operation;
import transfer.util.ResponseStatus;

/**
 *
 * @author Vladan Simonovic
 */
public class FrmReservation extends javax.swing.JDialog {

    private FrmReservationList frmReservation = null;
    private JDialog reservationList = null;

    /**
     * Creates new form FrmReservation
     */
    public FrmReservation(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setCurrentUser();
        setCentered();
        prepareTableMember();
        prepareTableProjection();
        frmReservation = new FrmReservationList();
        reservationList = new JDialog(this, "View reservation list", false);

        reservationList.add(frmReservation);
        reservationList.pack();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlCurrentUser = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        lblCurrentUser = new javax.swing.JLabel();
        pnlMovies = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txtKeyword = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblMembers = new javax.swing.JTable();
        pnlProjection = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblProjection = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtMovie = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtTime = new javax.swing.JTextField();
        txtNumberOfTickets = new javax.swing.JTextField();
        btnAddToReservationList = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        txtCinemaHall = new javax.swing.JTextField();
        rbTitle = new javax.swing.JRadioButton();
        jLabel7 = new javax.swing.JLabel();
        rbProjectionDateTime = new javax.swing.JRadioButton();
        btnViewReservationList = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        pnlCurrentUser.setBorder(javax.swing.BorderFactory.createTitledBorder("User:"));

        jLabel1.setText("Current user:");

        lblCurrentUser.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        lblCurrentUser.setForeground(new java.awt.Color(51, 0, 204));

        javax.swing.GroupLayout pnlCurrentUserLayout = new javax.swing.GroupLayout(pnlCurrentUser);
        pnlCurrentUser.setLayout(pnlCurrentUserLayout);
        pnlCurrentUserLayout.setHorizontalGroup(
            pnlCurrentUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCurrentUserLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(lblCurrentUser, javax.swing.GroupLayout.DEFAULT_SIZE, 862, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnlCurrentUserLayout.setVerticalGroup(
            pnlCurrentUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCurrentUserLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlCurrentUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(lblCurrentUser))
                .addContainerGap(25, Short.MAX_VALUE))
        );

        pnlMovies.setBorder(javax.swing.BorderFactory.createTitledBorder("Members"));

        jLabel2.setText("Keyword:");

        btnSearch.setText("Search for members");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        tblMembers.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblMembers);

        javax.swing.GroupLayout pnlMoviesLayout = new javax.swing.GroupLayout(pnlMovies);
        pnlMovies.setLayout(pnlMoviesLayout);
        pnlMoviesLayout.setHorizontalGroup(
            pnlMoviesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMoviesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlMoviesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlMoviesLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(txtKeyword))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 957, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlMoviesLayout.createSequentialGroup()
                        .addGap(0, 806, Short.MAX_VALUE)
                        .addComponent(btnSearch)))
                .addContainerGap())
        );
        pnlMoviesLayout.setVerticalGroup(
            pnlMoviesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMoviesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlMoviesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtKeyword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnSearch)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 155, Short.MAX_VALUE)
                .addContainerGap())
        );

        pnlProjection.setBorder(javax.swing.BorderFactory.createTitledBorder("Projections"));

        tblProjection.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblProjection.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblProjectionMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblProjection);

        jLabel3.setText("Number of tickets:");

        jLabel4.setText("Movie:");

        txtMovie.setEditable(false);

        jLabel5.setText("Time:");

        txtTime.setEditable(false);

        txtNumberOfTickets.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N

        btnAddToReservationList.setBackground(new java.awt.Color(255, 255, 255));
        btnAddToReservationList.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnAddToReservationList.setForeground(new java.awt.Color(0, 153, 0));
        btnAddToReservationList.setText("Add to reservation list");
        btnAddToReservationList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddToReservationListActionPerformed(evt);
            }
        });

        jLabel6.setText("Cinema hall:");

        txtCinemaHall.setEditable(false);

        rbTitle.setText("Movie title");
        rbTitle.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rbTitleItemStateChanged(evt);
            }
        });

        jLabel7.setText("Sort by:");

        rbProjectionDateTime.setText("Projection date&time");
        rbProjectionDateTime.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rbProjectionDateTimeItemStateChanged(evt);
            }
        });

        btnViewReservationList.setBackground(new java.awt.Color(255, 255, 255));
        btnViewReservationList.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnViewReservationList.setForeground(new java.awt.Color(0, 153, 51));
        btnViewReservationList.setText("View reservation list");
        btnViewReservationList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewReservationListActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlProjectionLayout = new javax.swing.GroupLayout(pnlProjection);
        pnlProjection.setLayout(pnlProjectionLayout);
        pnlProjectionLayout.setHorizontalGroup(
            pnlProjectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlProjectionLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlProjectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlProjectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(pnlProjectionLayout.createSequentialGroup()
                            .addGroup(pnlProjectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel3)
                                .addComponent(jLabel5)
                                .addComponent(jLabel4)
                                .addComponent(jLabel6))
                            .addGap(33, 33, 33)
                            .addGroup(pnlProjectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(txtCinemaHall, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtMovie, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtTime, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(pnlProjectionLayout.createSequentialGroup()
                                    .addComponent(txtNumberOfTickets, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(btnAddToReservationList)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnViewReservationList, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGroup(pnlProjectionLayout.createSequentialGroup()
                            .addComponent(jLabel7)
                            .addGap(71, 71, 71)
                            .addComponent(rbTitle)
                            .addGap(18, 18, 18)
                            .addComponent(rbProjectionDateTime)))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 957, Short.MAX_VALUE))
                .addContainerGap())
        );
        pnlProjectionLayout.setVerticalGroup(
            pnlProjectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlProjectionLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlProjectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbTitle)
                    .addComponent(jLabel7)
                    .addComponent(rbProjectionDateTime))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(pnlProjectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtCinemaHall, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(pnlProjectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtMovie, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlProjectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtTime, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlProjectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnlProjectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtNumberOfTickets, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnAddToReservationList, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnViewReservationList, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel3))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(pnlProjection, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlCurrentUser, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlMovies, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlCurrentUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(pnlMovies, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(pnlProjection, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        try {
            String keyword = txtKeyword.getText().trim();
            Communication.getInstance().sendRequest(new Request(Operation.OPERATION_SEARCH_MEMBERS, keyword));
            Response response = Communication.getInstance().readResponse();
            if (response.getStatus() == ResponseStatus.OK) {
                TableModelMember model = (TableModelMember) tblMembers.getModel();
                List<Member> members = (List<Member>) response.getData();
                model.setMembers(members);
                for (Member member : members) {
                    System.out.println(member);
                }
                if (members.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Members with keyword " + keyword + " not found!",
                            "Search error", JOptionPane.ERROR_MESSAGE);
                    model.setMembers(new ArrayList<>());
                    return;
                }
                JOptionPane.showMessageDialog(this, "Members with keyword " + keyword + " are found!");
                model.fireTableDataChanged();
            } else {
                JOptionPane.showMessageDialog(this, "Member not found!", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnAddToReservationListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddToReservationListActionPerformed
        TableModelMember modelMember = (TableModelMember) tblMembers.getModel();
        int selectedRowMember = tblMembers.getSelectedRow();
        Member member = null;
        Projection projection = null;
        if (selectedRowMember != -1) {
            member = modelMember.getMembers().get(selectedRowMember);
        } else {
            JOptionPane.showMessageDialog(this, "Member is not selected.", "Save reservation error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        int selectedRowProjection = tblProjection.getSelectedRow();
        TableModelProjection modelProjection = (TableModelProjection) tblProjection.getModel();
        if (selectedRowProjection != -1) {
            projection = modelProjection.getProjections().get(selectedRowProjection);
        } else {
            JOptionPane.showMessageDialog(this, "Projection is not selected.", "Table projection error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        User user = Session.getInstance().getCurrentUser();

        String strNumOfTickes = txtNumberOfTickets.getText().trim();
        Integer numberOfTickets = null;
        try {
            numberOfTickets = Integer.parseInt(strNumOfTickes);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Number of tickets must be an integer!", "Save reservation error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (numberOfTickets <= 0) {
            JOptionPane.showMessageDialog(this, "Number of tickets must be positive integer!", "Save reservation error", JOptionPane.ERROR_MESSAGE);
            txtNumberOfTickets.grabFocus();
            return;
        } else if (numberOfTickets > 5) {
            JOptionPane.showMessageDialog(this, "Maximum number of reserved tickets is five.", "Save reservation error", JOptionPane.ERROR_MESSAGE);
            txtNumberOfTickets.grabFocus();
            return;
        }

        Reservation reservation = new Reservation(null, new Date(), numberOfTickets, member, projection, user);
        TableModelReservation modelReservation = (TableModelReservation) frmReservation.getTblReservationList().getModel();
        modelReservation.add(reservation);
        JOptionPane.showMessageDialog(this, "Reservation for " + member + " added to the list!");

    }//GEN-LAST:event_btnAddToReservationListActionPerformed

    private void rbTitleItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rbTitleItemStateChanged
        TableModelProjection model = (TableModelProjection) tblProjection.getModel();
        List<Projection> projections = null;
        try {
            if (rbTitle.isSelected()) {
                String title = "m.Title";
                projections = Controller.getInstance().getAllProjections(title);
            } else {
                projections = Controller.getInstance().getAllProjections();
            }

            model.setProjections(projections);
            model.fireTableDataChanged();
        } catch (Exception ex) {
            System.out.println(ex.getMessage());

            JOptionPane.showMessageDialog(this, "An error occured while sorting by Movie title",
                    "Radio button title", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_rbTitleItemStateChanged

    private void rbProjectionDateTimeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rbProjectionDateTimeItemStateChanged
        TableModelProjection model = (TableModelProjection) tblProjection.getModel();
        List<Projection> projections = null;
        try {
            if (rbProjectionDateTime.isSelected()) {
                String projectionDateTime = "p.ProjectionDateTime";
                projections = Controller.getInstance().getAllProjections(projectionDateTime);
            } else {
                projections = Controller.getInstance().getAllProjections();
            }

            model.setProjections(projections);
            model.fireTableDataChanged();
        } catch (Exception ex) {
            System.out.println(ex.getMessage());

            JOptionPane.showMessageDialog(this, "An error occured while sorting by Projection date&time",
                    "Radio button projection date&time", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_rbProjectionDateTimeItemStateChanged

    private void tblProjectionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblProjectionMouseClicked
        int selectedRow = tblProjection.getSelectedRow();
        TableModelProjection model = (TableModelProjection) tblProjection.getModel();
        if (selectedRow != -1) {
            Projection projection = model.getProjections().get(selectedRow);
            txtMovie.setText(projection.getMovie().toString());
            txtCinemaHall.setText(projection.getCinemaHall().toString());
            txtTime.setText(new SimpleDateFormat("dd.MM.yyyy HH:mm").format(projection.getProjectionDateTime()));
        } else {
            JOptionPane.showMessageDialog(this, "Projection is not selected.", "Table projection error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_tblProjectionMouseClicked

    private void btnViewReservationListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewReservationListActionPerformed

        reservationList.setVisible(true);
        reservationList.setLocationRelativeTo(null);
    }//GEN-LAST:event_btnViewReservationListActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddToReservationList;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnViewReservationList;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblCurrentUser;
    private javax.swing.JPanel pnlCurrentUser;
    private javax.swing.JPanel pnlMovies;
    private javax.swing.JPanel pnlProjection;
    private javax.swing.JRadioButton rbProjectionDateTime;
    private javax.swing.JRadioButton rbTitle;
    private javax.swing.JTable tblMembers;
    private javax.swing.JTable tblProjection;
    private javax.swing.JTextField txtCinemaHall;
    private javax.swing.JTextField txtKeyword;
    private javax.swing.JTextField txtMovie;
    private javax.swing.JTextField txtNumberOfTickets;
    private javax.swing.JTextField txtTime;
    // End of variables declaration//GEN-END:variables

    private void setCurrentUser() {
        lblCurrentUser.setText(Session.getInstance().getCurrentUser().toString());
    }

    private void setCentered() {
        setLocationRelativeTo(null);
    }

    private void prepareTableMember() {
        try {
            List<Member> allMembers = Controller.getInstance().getAllMembers();
            TableModelMember model = new TableModelMember(allMembers);
            tblMembers.setModel(model);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Table preparation failed.", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void prepareTableProjection() {
        try {
            List<Projection> projections = Controller.getInstance().getAllProjections();
            TableModelProjection model = new TableModelProjection(projections);
            tblProjection.setModel(model);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Table preparation has failed.", "Table error", JOptionPane.ERROR_MESSAGE);
        }
    }
}
